CREATE DATABASE college;

USE college

CREATE TABLE student(
    student_id INTEGER NOT NULL PRIMARY KEY,
    name VARCHAR(10) NOT NULL,
    year TINYINT NOT NULL DEFAULT 1,
    dept_no INT NOT NULL,
    major VARCHAR(20)
);

CREATE TABLE department(
    dept_no INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    dept_name VARCHAR(20) UNIQUE,
    office VARCHAR(20) NOT NULL,
    office_tel VARCHAR(13)
);

ALTER TABLE student MODIFY major major VARCHAR(30);
DESC student;
ALTER TABLE student ADD COLUMN gender VARCHAR(15) NOT NULL;

ALTER TABLE student DROP COLUMN gender;

// insert 값 중 안들어가지는 값이 있어 수정한 것들.
ALTER TABLE student MODIFY name name VARCHAR(15) NOT NULL;
ALTER TABLE student MODIFY major major VARCHAR(50);
ALTER TABLE department MODIFY dept_name dept_name VARCHAR(50) UNIQUE;
ALTER TABLE department MODIFY office office VARCHAR(50) NOT NULL;

-- Ex 2
INSERT INTO student VALUES (20070002, "Jane Smith", 3, 4, "Business Administration");
INSERT INTO student VALUES (20060001, 'Ashley Jackson', 4, 4, "Business Administration");
INSERT INTO student VALUES (20030001, "Liam Johnson", 4, 2, "Electrical Engineering");
INSERT INTO student VALUES (20040003, "Jacob Lee", 3, 2, "Electrical Engineering");
INSERT INTO student VALUES (20060002, "Noah Kim", 3, 1, "Computer Science");
INSERT INTO student VALUES (20100002, "Ava Lim", 3, 4, "Business Administration");
INSERT INTO student VALUES (20110001, "Emma Watson", 2, 1, "Computer Science");
INSERT INTO student VALUES (20080003, "Lisa Maria", 4, 3, "Law");
INSERT INTO student VALUES (20040002, "Jacob William", 4, 5, "Law");
INSERT INTO student VALUES (20070001, "Emily Rose", 4, 4, "Business Administration");
INSERT INTO student VALUES (20100001, "Ethan Hunt", 3, 4, "Business Administration");
INSERT INTO student VALUES (20110002, "Jason Mraz", 2, 1, "Electrical Engineering");
INSERT INTO student VALUES (20030002, "John Smith", 5, 1, "Computer Science");
INSERT INTO student VALUES (20070003, "Sophia Park", 4, 3, "Law");
INSERT INTO student VALUES (20070007, "James Michael", 2, 4, "Business Administration");
INSERT INTO student VALUES (20100003, "James Bond", 3, 1, "Computer Science");
INSERT INTO student VALUES (20070005, "Olivia Madison", 2, 5, "English Language and Literature");

INSERT INTO department (dept_name, office, office_tel) VALUES ("Computer Science", "Science Building 101", "02-3290-0123");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Electrical Engineering", "Engineering Building 401", "02-3290-2345");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Law", "Law Building 201", "02-3290-7896");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Business Administration", "Business Building 104", "02-3290-1112");
INSERT INTO department (dept_name, office, office_tel) VALUES ("English Language and Literature", "Language Building 303", "02-3290-4412");

-- Ex 3
UPDATE department SET dept_name = 'Electrical and Electronics Engineering' WHERE dept_name='Electrical Engineering';
INSERT INTO department (dept_name, office, office_tel) VALUES('Special Education', 'Education Building 403', '02-3290-2347');
UPDATE student SET dept_no=6 WHERE name='Emma Watson';
DELETE FROM student WHERE name='Jason Mraz';
DELETE FROM student WHERE name='John Smith';

-- Ex 4
SELECT * FROM student WHERE major='Computer Science';
SELECT student_id, year, major FROM student;
SELECT * FROM student WHERE year=3;
SELECT * FROM student WHERE year=1 OR year=2;
SELECT * FROM student WHERE dept_no = (SELECT dept_no FROM department WHERE dept_name='Business Administration');

-- Ex 5
SELECT * FROM student WHERE student_id LIKE '2007%';
SELECT * FROM student ORDER BY student_id;
SELECT major FROM student GROUP BY major HAVING AVG(year) > 3;
SELECT * FROM student WHERE major='Business Administration' AND student_id LIKE '2007%' LIMIT 2;

-- Ex 6
USE imdb
SELECT role FROM roles JOIN movies ON roles.movie_id = movies.id WHERE movies.name='PI';
SELECT first_name, last_name, roles.role FROM actors JOIN roles ON actors.id=roles.actor_id JOIN movies ON roles.movie_id=movies.id WHERE movies.name='Pi';
SELECT first_name, last_name FROM actors JOIN roles ON actors.id=roles.actor_id JOIN movies ON roles.movie_id=movies.id WHERE movies.name='Kill Bill: Vol. 1' AND actors.id IN (SELECT actors.id FROM actors JOIN roles ON actors.id=roles.actor_id JOIN movies ON roles.movie_id=movies.id WHERE movies.name='Kill Bill: Vol. 2');
SELECT first_name, last_name FROM actors JOIN roles ON actors.id=roles.actor_id GROUP BY actors.id ORDER BY COUNT(roles.actor_id) DESC LIMIT 7;
SELECT genre FROM movies_genres JOIN movies ON movies_genres.movie_id=movies.id GROUP BY genre ORDER BY COUNT(movies.id) DESC;
SELECT first_name, last_name FROM movies JOIN movies_genres ON movies.id = movies_genres.movie_id JOIN movies_directors ON movies.id = movies_directors.movie_id JOIN directors ON movies_directors.director_id = directors.id WHERE movies_genres.genre = 'Thriller' GROUP BY directors.id ORDER BY COUNT(movies.id) DESC LIMIT 1;

-- Ex 7
USE simpsons
SELECT grade FROM grades JOIN courses ON grades.course_id=courses.id WHERE courses.name='Computer Science 143';
SELECT students.name, grades.grade FROM students JOIN grades ON students.id=grades.student_id JOIN courses ON grades.course_id=courses.id WHERE courses.name='Computer Science 143' and grades.grade <= 'B-';
SELECT students.name, courses.name, grades.grade FROM students JOIN grades ON students.id=grades.student_id JOIN courses ON grades.course_id=courses.id WHERE grades.grade <= 'B-';
SELECT courses.name FROM courses JOIN grades ON courses.id=grades.course_id GROUP BY grades.course_id HAVING COUNT(grades.student_id)>=2;
